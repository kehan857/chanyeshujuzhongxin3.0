# 熵变智元AI销售助手 - 主应用部署

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-sales-assistant
  namespace: ai-sales-assistant
  labels:
    app: ai-sales-assistant
    component: backend
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-sales-assistant
      component: backend
  template:
    metadata:
      labels:
        app: ai-sales-assistant
        component: backend
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # 安全上下文
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # 初始化容器
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: POSTGRES_PASSWORD
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U ai_sales_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      
      - name: wait-for-redis
        image: redis:7-alpine
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: REDIS_PASSWORD
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-service -p 6379 -a $REDIS_PASSWORD ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
      
      # 主容器
      containers:
      - name: ai-sales-assistant
        image: ai-sales-assistant:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        
        # 环境变量
        envFrom:
        - configMapRef:
            name: ai-sales-assistant-config
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: SECRET_KEY
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: REDIS_PASSWORD
        - name: GEWE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: GEWE_API_KEY
        - name: FASTGPT_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-sales-assistant-secrets
              key: FASTGPT_API_KEY
        - name: EMAIL_USERNAME
          valueFrom:
            secretKeyRef:
              name: email-credentials
              key: EMAIL_USERNAME
              optional: true
        - name: EMAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: email-credentials
              key: EMAIL_PASSWORD
              optional: true
        - name: SMS_API_KEY
          valueFrom:
            secretKeyRef:
              name: sms-credentials
              key: SMS_API_KEY
              optional: true
        - name: SMS_API_SECRET
          valueFrom:
            secretKeyRef:
              name: sms-credentials
              key: SMS_API_SECRET
              optional: true
        
        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # 启动探针
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # 资源限制
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # 挂载卷
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
        
        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      # 卷配置
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: ai-sales-assistant-uploads
      - name: logs
        persistentVolumeClaim:
          claimName: ai-sales-assistant-logs
      
      # 节点选择
      nodeSelector:
        kubernetes.io/os: linux
      
      # 容忍度
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "ai-sales-assistant"
        effect: "NoSchedule"

---
# Nginx反向代理部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: ai-sales-assistant
  labels:
    app: ai-sales-assistant
    component: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-sales-assistant
      component: nginx
  template:
    metadata:
      labels:
        app: ai-sales-assistant
        component: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

